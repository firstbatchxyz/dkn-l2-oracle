// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.26;

/// @dev solc v0.8.26; solc tests/contracts/TestSolidityPacked.sol --via-ir --optimize --bin
/// @dev you may have to do: `solc-select install 0.8.26`
/// @dev 608080604052346015576102bd908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c8063026131d7146101115780639dac80891461007f5763aa1e84de1461003a575f80fd5b3461007b57602036600319011261007b5760043567ffffffffffffffff811161007b5761006d60209136906004016101a9565b818151910120604051908152f35b5f80fd5b3461007b5761010d60206100f96059610097366101ff565b916040979397519788956bffffffffffffffffffffffff199060601b1685870152603486015263ffffffff60e01b9060e01b166054850152151560f81b60588401528051918291018484015e81015f838201520301601f198101835282610173565b604051918291602083526020830190610263565b0390f35b3461007b5761010d6101696100f963ffffffff61012d366101ff565b604080516001600160a01b03909616602087015285019390935293166060830152911515608082015260a08082015292839160c0830190610263565b03601f1981018352825b90601f8019910116810190811067ffffffffffffffff82111761019557604052565b634e487b7160e01b5f52604160045260245ffd5b81601f8201121561007b5780359067ffffffffffffffff821161019557604051926101de601f8401601f191660200185610173565b8284526020838301011161007b57815f926020809301838601378301015290565b60a060031982011261007b576004356001600160a01b038116810361007b57916024359160443563ffffffff8116810361007b5791606435801515810361007b57916084359067ffffffffffffffff821161007b57610260916004016101a9565b90565b805180835260209291819084018484015e5f828201840152601f01601f191601019056fea2646970667358221220e3f817afaaaef1121ac298a855627f97dac246dd3de24d8585bef6c9fce3ab5664736f6c634300081a0033
contract TestSolidityPacked {
    function encodePacked(address someAddress, uint256 someNumber, uint32 someShort, bool someBool, bytes memory someBytes) public pure returns (bytes memory) {
        return abi.encodePacked(someAddress, someNumber, someShort, someBool, someBytes);
    }

    function encode(address someAddress, uint256 someNumber, uint32 someShort, bool someBool, bytes memory someBytes) public pure returns (bytes memory) {
        return abi.encode(someAddress, someNumber, someShort, someBool, someBytes);
    }

    function hash(bytes memory data) public pure returns (bytes32) {
        return keccak256(data);
    }
}
